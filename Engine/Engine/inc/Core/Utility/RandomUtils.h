//////////////////////////////////////////////////////////////////////////
//    File        	: RandomUtils.h
//    Created By    : Jack Spink
//    Created On 	: [1/11/2019]
//////////////////////////////////////////////////////////////////////////

#pragma once

//////////////////////////////////////////////////////////////////////////

#include "Core/Singleton.h"

//////////////////////////////////////////////////////////////////////////

#include <random>

//////////////////////////////////////////////////////////////////////////

class Random: public Singleton<Random>
{
public:
    f32 GetRandomInRange(f32 min, f32 max) const;

private:
    mutable std::default_random_engine engine;
};

//////////////////////////////////////////////////////////////////////////

static inline Ref<Random> GetRandomEngine() { return Random::Get(); }

//////////////////////////////////////////////////////////////////////////

using IntegerDistribution = std::uniform_int_distribution<s32>;
using FloatDistribution = std::uniform_real_distribution<f32>;

//////////////////////////////////////////////////////////////////////////

struct global_random
{
public:
    static void initialise();

public:
    static f32 as_float(f32 min, f32 max);

private:
    static inline std::default_random_engine engine;
};

//////////////////////////////////////////////////////////////////////////
