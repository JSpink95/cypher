//////////////////////////////////////////////////////////////////////////
//    File        	: Object.cpp
//    Created By    : Jack Spink
//    Created On 	: [17/9/2019]
//////////////////////////////////////////////////////////////////////////

#include "Core/Object.h"
#include "Core/Thread/GameThread.h"

//////////////////////////////////////////////////////////////////////////

#include "Core/RTTI/RTTI.h"

//////////////////////////////////////////////////////////////////////////

#include "imgui.h"

//////////////////////////////////////////////////////////////////////////

RTTI_BEGIN_WITH_BASE(Object, RTTIObject)
    RTTI_PROPERTY_MAP(Object, std::unordered_map, ComponentId, Ref<Component>, components)
RTTI_END()

//////////////////////////////////////////////////////////////////////////

Object::Object()
{
}

//////////////////////////////////////////////////////////////////////////

Object::~Object()
{

}

//////////////////////////////////////////////////////////////////////////

void Object::OnConstruct()
{
}

//////////////////////////////////////////////////////////////////////////

void Object::OnDestruct()
{
    for (auto component : components)
        component.second->OnDestruct();
}

//////////////////////////////////////////////////////////////////////////

void Object::OnUpdate(const f32 dt)
{
    for (auto component : components)
        component.second->OnUpdate(dt);
}

//////////////////////////////////////////////////////////////////////////

void Object::OnPhysicsUpdate(const f32 dt)
{
}

//////////////////////////////////////////////////////////////////////////

void Object::OnRender(RenderPassType::Enum pass, Ref<Material> materialOverride/* = nullptr*/)
{
    for (auto component : components)
        component.second->OnRender(pass, materialOverride);
}

//////////////////////////////////////////////////////////////////////////

void Object::SetTickEnabled(bool const enabled)
{
    //if (enabled)
    //{
    //    GetGameThread()->AddObject(self);
    //}
    //else
    //{
    //    GetGameThread()->RemoveObject(self);
    //}
}

//////////////////////////////////////////////////////////////////////////

namespace RTTI
{
    Ref<Object> LoadFromXML(const std::string& filepath)
    {
        return nullptr;
    }
}

//////////////////////////////////////////////////////////////////////////
