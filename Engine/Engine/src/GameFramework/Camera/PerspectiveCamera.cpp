//////////////////////////////////////////////////////////////////////////
//    File        	: PerspectiveCamera.cpp
//    Created By    : Jack Spink
//    Created On 	: [19/9/2019]
//////////////////////////////////////////////////////////////////////////

#include "GameFramework/Camera/PerspectiveCamera.h"

//////////////////////////////////////////////////////////////////////////

#include "Core/RTTI/RTTI.h"

//////////////////////////////////////////////////////////////////////////

RTTI_BEGIN_WITH_BASE(CameraPerspective, RTTIObject)
    RTTI_PROPERTY(CameraPerspective, f32, fovDegrees)
    RTTI_PROPERTY(CameraPerspective, f32, nearClip)
    RTTI_PROPERTY(CameraPerspective, f32, farClip)
RTTI_END()

//////////////////////////////////////////////////////////////////////////

fmat4 CameraPerspective::GetViewMatrix() const
{
    return view;
}

//////////////////////////////////////////////////////////////////////////

fmat4 CameraPerspective::GetProjectionMatrix() const
{
    return projection;
}

//////////////////////////////////////////////////////////////////////////

fmat4 CameraPerspective::GetViewProjectionMatrix() const
{
    return viewProjection;
}

//////////////////////////////////////////////////////////////////////////

float3 CameraPerspective::GetEyeLocation() const
{
    return eye;
}

//////////////////////////////////////////////////////////////////////////

float3 CameraPerspective::GetEyeDirection() const
{
    return direction;
}

//////////////////////////////////////////////////////////////////////////

void CameraPerspective::OnUpdate(const f32 dt)
{
    Super::OnUpdate(dt);

    RebuildMatrixCache();
}

//////////////////////////////////////////////////////////////////////////

void CameraPerspective::SetEyeAndDirection(const float3& e, const float3& d)
{
    eye = e;
    direction = d;
    RebuildMatrixCache();
}

//////////////////////////////////////////////////////////////////////////

void CameraPerspective::SetScreenDimensions(const float2& dimensions)
{
    screenDimensions = dimensions;
    RebuildMatrixCache();
}

//////////////////////////////////////////////////////////////////////////

void CameraPerspective::RebuildMatrixCache()
{
    view = glm::lookAt(eye, eye + direction, float3(0.0f, 1.0f, 0.0f));
    projection = glm::perspectiveFov(glm::radians(fovDegrees), screenDimensions.x, screenDimensions.y, nearClip, farClip);
    viewProjection = projection * view;
}

//////////////////////////////////////////////////////////////////////////
