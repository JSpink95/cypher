//////////////////////////////////////////////////////////////////////////
//    File        	: SandboxApplication.cpp
//    Created By    : Jack Spink
//    Created On 	: [24/9/2019]
//////////////////////////////////////////////////////////////////////////

#include "SandboxApplication.h"

//////////////////////////////////////////////////////////////////////////

#include "Core/RTTI/RTTI.h"

//////////////////////////////////////////////////////////////////////////

#include "Core/Object.h"
#include "Core/Component.h"
#include "Core/ComponentRef.h"

//////////////////////////////////////////////////////////////////////////

#include "GameFramework/Camera/PerspectiveCamera.h"
#include "GameFramework/Component/TransformComponent.h"

//////////////////////////////////////////////////////////////////////////

class FpsCameraController: public Component
{
    DECLARE_COMPONENT(FpsCameraController, Component)
public:
    FpsCameraController();

public:
    virtual void OnConstruct() override;

public:
    ComponentRef<TransformComponent> transform;
    Ref<CameraPerspective> camera;
};

//////////////////////////////////////////////////////////////////////////

RTTI_BEGIN_WITH_BASE(FpsCameraController, Component)
    RTTI_PROPERTY(FpsCameraController, ComponentRef<TransformComponent>, transform)
    RTTI_PROPERTY(FpsCameraController, Ref<CameraPerspective>, camera)
RTTI_END()

//////////////////////////////////////////////////////////////////////////

FpsCameraController::FpsCameraController()
{
    transform.componentName = "CameraTransform";
}

//////////////////////////////////////////////////////////////////////////

void FpsCameraController::OnConstruct()
{
    Super::OnConstruct();

    transform.OnConstruct(owner);
    camera = std::make_shared<CameraPerspective>();
    camera->MakeThisActive();
}

//////////////////////////////////////////////////////////////////////////

void SandboxApplication::OnPostCreate()
{
    Application::OnPostCreate();
}

//////////////////////////////////////////////////////////////////////////

void SandboxApplication::OnDestroy()
{
    Application::OnDestroy();
}

//////////////////////////////////////////////////////////////////////////

void main()
{
    Application::Main<SandboxApplication>();
}

//////////////////////////////////////////////////////////////////////////
